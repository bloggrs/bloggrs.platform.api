---
openapi: 3.0.0
info:
  title: API Docs
  description: ''
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: http://localhost:4000/api/v1
  description: Auto-hosted version
- url: https://app-name.herokuapp.com/api/v1
  description: Live
tags:
- name: Users
  description: Users related API endpoints
- name: Auth
  description: Authentication related API endpoints
paths:
  "/auth":
    post:
      tags:
      - Auth
      summary: Get token with credentials
    get:
      tags:
      - Auth
      security:
      - jwt_auth: []
      summary: Get auth info by token
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/ApiResponse"
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        user:
                          type: array
                          items:
                            "$ref": "#/components/schemas/User"
                        token:
                          type: string
                          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImldhdCI6MTU5OTQ4MTQ2OH0.U9eHm-8zuCaGa776rUViOa33l22lSSRNctkfgstIz5k
        '401':
          description: Unauthorized
  "/users":
    get:
      tags:
      - Users
      summary: Get all users
      security:
      - jwt_auth: []
      responses:
        '200':
          description: Returns list of users
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/ApiResponse"
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        users:
                          type: array
                          items:
                            "$ref": "#/components/schemas/User"
    post:
      tags:
      - Users
      summary: Create user
      description: Adds an user to the system
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - first_name
              - last_name
              - email
              - password
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: Successful operation, created user, token received
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/ApiResponse"
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        user:
                          "$ref": "#/components/schemas/User"
                        token:
                          type: string
                          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImldhdCI6MTU5OTQ4MTQ2OH0.U9eHm-8zuCaGa776rUViOa33l22lSSRNctkfgstIz5k
        '403':
          description: Validation error
  "/users/unrestricted":
    post:
      tags:
      - Users
      summary: Create user with full access
      security:
      - jwt_auth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - first_name
              - last_name
              - email
              - password
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: Successful operation, created user, token received
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/ApiResponse"
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        user:
                          "$ref": "#/components/schemas/User"
        '403':
          description: Validation error

  "/users/{user_id}":
    get:
      tags:
      - Users
      summary: Get specific user
      parameters:
      - name: user_id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          format: int64
      security:
      - jwt_auth: []
      responses:
        '200':
          description: Returns a specific user
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/ApiResponse"
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        user:
                          "$ref": "#/components/schemas/User"
    patch:
      tags:
      - Users
      summary: Update user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - first_name
              - last_name
              - email
              - password
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      parameters:
      - name: user_id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          format: int64
      security:
      - jwt_auth: []
      responses:
        '200':
          description: Returns a specific user
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/ApiResponse"
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        user:
                          "$ref": "#/components/schemas/User"
    delete:
      tags:
      - Users
      summary: Delete user
      parameters:
      - name: user_id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          format: int64
      security:
      - jwt_auth: []
      responses:
        '204':
          description: Returns success 204 
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/ApiResponse"
                - type: object
                  properties:
                    code:
                      type: integer
                      example: 204

components:
  securitySchemes:
    jwt_auth:
      description: 'Example value: "Bearer <jwt_token>"'
      type: apiKey
      name: Authorization
      in: header
  schemas:
    User:
      required:
      - id
      - email
      - password
      - first_name
      - last_name
      type: object
      properties:
        id:
          type: integer
          example: '1'
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string@domain.com
          example: Doe
        password:
          type: string
          example: example.123
    ApiResponse:
      type: object
      properties:
        message:
          type: string
          example: success
        code:
          type: integer
          example: 200
